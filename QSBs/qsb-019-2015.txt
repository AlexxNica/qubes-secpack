

             ---===[ Qubes Security Bulletin #19 ]===---

                            July 13, 2015


          Anti Evil Maid bypass through unusual LUKS header

History
========

July 14: Improved readability, some clarifications.
July 13: Original public release


Quick Summary
==============

Rusty Bird discovered a clever attack on Anti Evil Maid using an
unusual LUKS header. The attacker can modify a system in a way that
allows them to steal the LUKS passphrase, but AEM will not notice the
difference. (The AEM user secret will be displayed as if nothing had
happened.) Default Qubes installations are not vulnerable to this
attack, but with custom kernels or initramfs are likely to be.


Description of the bug
=======================

Anti Evil Maid (AEM) is meant to detect malicious system modifications
and alert the user before he or she decides to enter the LUKS
passphrase for hard drive decryption. If any modification is detected,
AEM will not show a secret to the user, thus implicitly alerting the
user. This is achieved using the TPM for measurements of some base
system components, paired with the TPM's sealing functionality. The
LUKS header has not been, however, included in the set of measured
components, which resulted in the vulnerability discussed here. More
details about the Anti Evil Maid can be found in this article [1].

The LUKS header, among other things, contains the type of cipher used
for disk encryption. If the attacker changed this field (or any other
encryption parameter), providing the correct passphrase would no
longer allow to retrieve the valid master key. The LUKS's
libcryptsetup code would assume that the user entered a wrong
passphrase and would prompt again.

But if a LUKS header contains a special "cipher_null" type of cipher,
then every passphrase gets silently accepted by the LUKS code. Of
course, in that case, the data would not be decrypted properly --
actually, the raw, encrypted data would be returned by LUKS. However,
the important thing is that an attacker can exploit this special
treatment of the "cipher_null" parameter and prepare a LUKS header
which works with any user passphrase, without actually knowing that
passphrase.

The next step, for the attacker, would be mounting the actual root
file system. Since "cipher_null" was used in the LUKS header, the data
will not be properly decrypted, so the original file system will not
be immediately accessible to the attacker. But since the disk content
is not authenticated (because the assumption is that an attacker needs
to know the LUKS passphrase to modify the data in a predictable way),
the attacker can replace the actual partition (or just a part of it)
with some small file-system containing just a single binary (init),
which will extract the user passphrase from the memory, store it
somewhere (or send it to the attacker), and then use it to mount the
original encrypted partition (now possible thanks to the passphrase
retrieved from memory).

This is all possible because the attacker, due to the special
treatment of the "cipher_null" parameter by the LUKS code, can easily
prepare a partition which can be properly mounted regardless of the
passphrase entered, plus the observation that, apparently, cryptsetup
leaves the passphrase in memory, so it is possible to extract it later
[*] by an attacker-provided program.

[*] We haven't evaluated how hard it would be to find the passphrase
location, but looking at a memory dump, it can be seen there in
several places.

Impact & Mitigating factors
-----------------------------

Luckily, this attack can succeed only if the kernel has
CONFIG_CRYPTO_NULL built in, or if the initrd contains the crypto_null
module. This is usually not the case, and the attacker cannot modify
them without invalidating the AEM secret.

However, if the crypto_null module was loaded at the time of AEM
installation for some reason, then dracut (used by
antievilmaid_install) would include the module automatically. Dracut
would also include the crypto_null module if configured for
no-hostonly mode.

Solution
---------

Our solution is to include the LUKS header in the AEM measurements.
Now, if the LUKS header was to be modified in any way, the user would
be alerted (as usual by not seeing the secret) and should not proceed
with entering the passphrase.

The LUKS header hash extends the PCR 13. This extend operation is
performed for every LUKS volume identified via the rd.luks.uuid boot
parameter, which is normally used to tell iniramfs which volumes to
mount.

This also means the user will need to reseal the AEM secret at the
next system startup after any LUKS header modification (such as
changing, or adding a new passphrase).


Patching
=========

The specific packages that resolve the problem discussed in this
bulletin have been uploaded to the security-testing repository:

* updated anti-evil-maid-dracut package, version 2.0.10
* new tpm-extra package, version 2.0.10

The packages are to be installed in Dom0 via "sudo qubes-dom0-update
anti-evil-maid-dracut" or via the Qubes graphical manager. Then mount
your Anti Evil Maid stick and run
`/usr/lib/antievilmaid/antievilmaid_install` again and reboot.

Afterwards, you will need to reseal your secret passphrase to new PCR
values, which will have changed due to the new initrd. Remember to
include "--pcr 13" in the tpm_sealdata command, as it now contains the
LUKS header hash(es).

These packages will be moved to the current repository over the coming
days once they receive more testing from the community.


About the Qubes Security Testing Repository
--------------------------------------------

security-testing is a new Qubes package repository that has been
introduced recently. It is disabled by default, and its purpose is to
allow better and wider testing of security critical updates, before
they make it to the "current" (default) repository.

This allows the users (rather than Qubes developers) to make the
tradeoffs of whether to install security updates early vs. wait until
they get more tested by the community. This accounts for the fact that
Qubes developers have limited ability to perform thorough testing
themselves. To help with the process we provide detailed analysis of
the security problems addressed by each QSB.

The security-testing repo definition is provided by the latest
core-agent-linux package (version 2.1.49) for the VMs, and
qubes-release-2-11 for Dom0. These packages are already available in
the default current repository.


Credits
========

The Qubes Security Team would like to thank the following people for
reporting and working with us on the problem discussed above:

* Rusty Bird <rustybird@openmailbox.org>


References
===========

[1] http://blog.invisiblethings.org/2011/09/07/anti-evil-maid.html


The Qubes Security Team
http://wiki.qubes-os.org/trac/wiki/SecurityPage
